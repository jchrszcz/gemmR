// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// kt
double kt(NumericVector arr1, NumericVector arr2, int length);
RcppExport SEXP gemmR2_kt(SEXP arr1SEXP, SEXP arr2SEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        NumericVector arr1 = Rcpp::as<NumericVector >(arr1SEXP);
        NumericVector arr2 = Rcpp::as<NumericVector >(arr2SEXP);
        int length = Rcpp::as<int >(lengthSEXP);
        double __result = kt(arr1, arr2, length);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// fitValues
NumericVector fitValues(NumericVector betas, NumericMatrix data);
RcppExport SEXP gemmR2_fitValues(SEXP betasSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        NumericVector betas = Rcpp::as<NumericVector >(betasSEXP);
        NumericMatrix data = Rcpp::as<NumericMatrix >(dataSEXP);
        NumericVector __result = fitValues(betas, data);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// corRcpp
double corRcpp(NumericVector x, const NumericVector y);
RcppExport SEXP gemmR2_corRcpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        NumericVector x = Rcpp::as<NumericVector >(xSEXP);
        NumericVector y = Rcpp::as<NumericVector >(ySEXP);
        double __result = corRcpp(x, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// gemmFitRcpp
NumericVector gemmFitRcpp(int n, NumericVector betas, NumericMatrix data, int p, int kCor, bool pearson);
RcppExport SEXP gemmR2_gemmFitRcpp(SEXP nSEXP, SEXP betasSEXP, SEXP dataSEXP, SEXP pSEXP, SEXP kCorSEXP, SEXP pearsonSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        int n = Rcpp::as<int >(nSEXP);
        NumericVector betas = Rcpp::as<NumericVector >(betasSEXP);
        NumericMatrix data = Rcpp::as<NumericMatrix >(dataSEXP);
        int p = Rcpp::as<int >(pSEXP);
        int kCor = Rcpp::as<int >(kCorSEXP);
        bool pearson = Rcpp::as<bool >(pearsonSEXP);
        NumericVector __result = gemmFitRcpp(n, betas, data, p, kCor, pearson);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// gemmFitRcppI
List gemmFitRcppI(int n, NumericMatrix betas, NumericMatrix data, int p, NumericVector kCor, bool getR);
RcppExport SEXP gemmR2_gemmFitRcppI(SEXP nSEXP, SEXP betasSEXP, SEXP dataSEXP, SEXP pSEXP, SEXP kCorSEXP, SEXP getRSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        int n = Rcpp::as<int >(nSEXP);
        NumericMatrix betas = Rcpp::as<NumericMatrix >(betasSEXP);
        NumericMatrix data = Rcpp::as<NumericMatrix >(dataSEXP);
        int p = Rcpp::as<int >(pSEXP);
        NumericVector kCor = Rcpp::as<NumericVector >(kCorSEXP);
        bool getR = Rcpp::as<bool >(getRSEXP);
        List __result = gemmFitRcppI(n, betas, data, p, kCor, getR);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// sortIt
NumericMatrix sortIt(NumericMatrix x);
RcppExport SEXP gemmR2_sortIt(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        NumericMatrix x = Rcpp::as<NumericMatrix >(xSEXP);
        NumericMatrix __result = sortIt(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// genAlg
NumericMatrix genAlg(NumericMatrix metricbeta, int nbeta, int nsuperelites, int p, int reps, NumericMatrix bestmodels, bool seedmetric);
RcppExport SEXP gemmR2_genAlg(SEXP metricbetaSEXP, SEXP nbetaSEXP, SEXP nsuperelitesSEXP, SEXP pSEXP, SEXP repsSEXP, SEXP bestmodelsSEXP, SEXP seedmetricSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        NumericMatrix metricbeta = Rcpp::as<NumericMatrix >(metricbetaSEXP);
        int nbeta = Rcpp::as<int >(nbetaSEXP);
        int nsuperelites = Rcpp::as<int >(nsuperelitesSEXP);
        int p = Rcpp::as<int >(pSEXP);
        int reps = Rcpp::as<int >(repsSEXP);
        NumericMatrix bestmodels = Rcpp::as<NumericMatrix >(bestmodelsSEXP);
        bool seedmetric = Rcpp::as<bool >(seedmetricSEXP);
        NumericMatrix __result = genAlg(metricbeta, nbeta, nsuperelites, p, reps, bestmodels, seedmetric);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}

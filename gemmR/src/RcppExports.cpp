// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// kt
double kt(NumericVector arr1, NumericVector arr2, int length);
RcppExport SEXP gemmR_kt(SEXP arr1SEXP, SEXP arr2SEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type arr1(arr1SEXP );
        Rcpp::traits::input_parameter< NumericVector >::type arr2(arr2SEXP );
        Rcpp::traits::input_parameter< int >::type length(lengthSEXP );
        double __result = kt(arr1, arr2, length);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// fitValues
NumericVector fitValues(NumericVector betas, NumericMatrix data);
RcppExport SEXP gemmR_fitValues(SEXP betasSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type betas(betasSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP );
        NumericVector __result = fitValues(betas, data);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// corRcpp
double corRcpp(NumericVector x, const NumericVector y);
RcppExport SEXP gemmR_corRcpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP );
        double __result = corRcpp(x, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// gemmFitRcpp
NumericVector gemmFitRcpp(int n, NumericVector betas, NumericMatrix data, int p, int kCor, bool pearson, bool correction);
RcppExport SEXP gemmR_gemmFitRcpp(SEXP nSEXP, SEXP betasSEXP, SEXP dataSEXP, SEXP pSEXP, SEXP kCorSEXP, SEXP pearsonSEXP, SEXP correctionSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type n(nSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type betas(betasSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP );
        Rcpp::traits::input_parameter< int >::type p(pSEXP );
        Rcpp::traits::input_parameter< int >::type kCor(kCorSEXP );
        Rcpp::traits::input_parameter< bool >::type pearson(pearsonSEXP );
        Rcpp::traits::input_parameter< bool >::type correction(correctionSEXP );
        NumericVector __result = gemmFitRcpp(n, betas, data, p, kCor, pearson, correction);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// gemmFitRcppI
List gemmFitRcppI(int n, NumericMatrix betas, NumericMatrix data, int p, NumericVector kCor, bool getR, CharacterVector correction);
RcppExport SEXP gemmR_gemmFitRcppI(SEXP nSEXP, SEXP betasSEXP, SEXP dataSEXP, SEXP pSEXP, SEXP kCorSEXP, SEXP getRSEXP, SEXP correctionSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type n(nSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type betas(betasSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP );
        Rcpp::traits::input_parameter< int >::type p(pSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type kCor(kCorSEXP );
        Rcpp::traits::input_parameter< bool >::type getR(getRSEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type correction(correctionSEXP );
        List __result = gemmFitRcppI(n, betas, data, p, kCor, getR, correction);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// sortIt
NumericMatrix sortIt(NumericMatrix x);
RcppExport SEXP gemmR_sortIt(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP );
        NumericMatrix __result = sortIt(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// genAlg
NumericMatrix genAlg(NumericMatrix metricbeta, int nbeta, int nsuperelites, int p, int reps, NumericMatrix bestmodels, bool seedmetric);
RcppExport SEXP gemmR_genAlg(SEXP metricbetaSEXP, SEXP nbetaSEXP, SEXP nsuperelitesSEXP, SEXP pSEXP, SEXP repsSEXP, SEXP bestmodelsSEXP, SEXP seedmetricSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type metricbeta(metricbetaSEXP );
        Rcpp::traits::input_parameter< int >::type nbeta(nbetaSEXP );
        Rcpp::traits::input_parameter< int >::type nsuperelites(nsuperelitesSEXP );
        Rcpp::traits::input_parameter< int >::type p(pSEXP );
        Rcpp::traits::input_parameter< int >::type reps(repsSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type bestmodels(bestmodelsSEXP );
        Rcpp::traits::input_parameter< bool >::type seedmetric(seedmetricSEXP );
        NumericMatrix __result = genAlg(metricbeta, nbeta, nsuperelites, p, reps, bestmodels, seedmetric);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP gemmR_rcpp_hello_world() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        List __result = rcpp_hello_world();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}

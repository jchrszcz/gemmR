fit1.s <- stan(model_code = fit1_mod, data = fit1_dat, iter = 10, chains = 1)
fit1_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  real b0;#
  vector[S] b;#
  real<lower=0> s[S];#
}#
transformed parameters {#
  vector[S] s0;#
  for (i in 1:S)#
    s0 <- s + 1.0;#
}#
model {#
  b0 ~ normal(0, 100);#
  b ~ normal(0, 10);#
  s ~ exponential(100);#
  for (i in 1:N)#
  	y[i] ~ normal(b0 + b[idx[i]], s0[idx[i]]);#
}#
'#
#
fit1_dat <- list(y = qes.age$value,#
    idx = unclass(qes.age$idx),#
    N = length(qes.age$value),#
    S = length(unique(qes.age$idx))#
	)#
fit1.s <- stan(model_code = fit1_mod, data = fit1_dat, iter = 10, chains = 1)
fit1_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  real b0;#
  vector[S] b;#
  vector[S] s;#
}#
transformed parameters {#
  vector[S] s0;#
  for (i in 1:S)#
    s0 <- s + 1.0;#
}#
model {#
  b0 ~ normal(0, 100);#
  b ~ normal(0, 10);#
  s ~ exponential(100);#
  for (i in 1:N)#
  	y[i] ~ normal(b0 + b[idx[i]], s0[idx[i]]);#
}#
'#
#
fit1_dat <- list(y = qes.age$value,#
    idx = unclass(qes.age$idx),#
    N = length(qes.age$value),#
    S = length(unique(qes.age$idx))#
	)#
fit1.s <- stan(model_code = fit1_mod, data = fit1_dat, iter = 10, chains = 1)
fit1_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  real b0;#
  vector[S] b;#
  vector[S] s;#
}#
model {#
  b0 ~ normal(0, 100);#
  b ~ normal(0, 10);#
  s ~ pareto(1, 1);#
  for (i in 1:N)#
  	y[i] ~ normal(b0 + b[idx[i]], s[idx[i]]);#
}#
'
fit1.s <- stan(model_code = fit1_mod, data = fit1_dat, iter = 10, chains = 1)
temp_mod <- '#
parameters {#
  real mu;#
}#
model {#
  mu ~ pareto(1, 1);#
}#
'#
#
temp <- stan(model = temp_mod)
temp <- stan(model_code = temp_mod)
temp
fit1_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  real b0;#
  vector[S] b;#
  vector[S] s;#
}#
model {#
  b0 ~ normal(0, 100);#
  b ~ normal(0, 10);#
  s ~ pareto(1, 1);#
  for (i in 1:N)#
  	y[i] ~ normal(b0 + b[idx[i]], s[idx[i]]);#
}#
'#
#
fit1_dat <- list(y = qes.age$value,#
    idx = unclass(qes.age$idx),#
    N = length(qes.age$value),#
    S = length(unique(qes.age$idx))#
	)
fit1.s <- stan(model_code = fit1_mod, data = fit1_dat, iter = 10, chains = 1)
fit1_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  real b0;#
  vector[S] b;#
  real<lower=1> s[S];#
}#
model {#
  b0 ~ normal(0, 100);#
  b ~ normal(0, 10);#
  s ~ pareto(1, 1);#
  for (i in 1:N)#
  	y[i] ~ normal(b0 + b[idx[i]], s[idx[i]]);#
}#
'#
#
fit1_dat <- list(y = qes.age$value,#
    idx = unclass(qes.age$idx),#
    N = length(qes.age$value),#
    S = length(unique(qes.age$idx))#
	)#
fit1.s <- stan(model_code = fit1_mod, data = fit1_dat, iter = 10, chains = 1)
fit1.s <- stan(model_code = fit1_mod, data = fit1_dat, iter = 1000, chains = 4)
fit1.s <- stan(model_code = fit1_mod, data = fit1_dat, iter = 2000, chains = 4)
plot(fit1.s)
fit1_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector[S] b;#
  real<lower=1> s[S];#
}#
transformed parameters {#
  real b0;#
  real s0;#
  b0 <- median(b);#
  s0 <- median(s);#
}#
model {#
  b ~ normal(0, 100);#
  s ~ pareto(1, 1);#
  for (i in 1:N)#
  	y[i] ~ normal(b0 + b[idx[i]], s[idx[i]]);#
}#
'
fit1.s <- stan(model_code = fit1_mod, data = fit1_dat, iter = 10)
class(fit1.s)
?print.rstan
?rstan
fit1_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector[S] b;#
  real<lower=1> s[S];#
}#
model {#
  b ~ normal(0, 100);#
  s ~ pareto(1, 1);#
  for (i in 1:N)#
  	y[i] ~ normal(b[idx[i]], s[idx[i]]);#
}
fit1.s <- stan(model_code = fit1_mod, data = fit1_dat, iter = 10)
fit1_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector[S] b;#
  real<lower=1> s[S];#
}#
model {#
  b ~ normal(0, 100);#
  s ~ pareto(1, 1);#
  for (i in 1:N)#
  	y[i] ~ normal(b[idx[i]], s[idx[i]]);#
}#
'
fit1.s <- stan(model_code = fit1_mod, data = fit1_dat, iter = 10)
fit1_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  real b0;#
  vector[S] b;#
  real<lower=1> s[S];#
}#
model {#
  b0 ~ normal(0, 100);#
  b ~ normal(b0, 100);#
  s ~ pareto(1, 1);#
  for (i in 1:N)#
  	y[i] ~ normal(b[idx[i]], s[idx[i]]);#
}#
'
fit1.s <- stan(model_code = fit1_mod, data = fit1_dat, iter = 10)
fit1_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  real b0;#
  vector[S] b;#
  real<lower=1> s0;#
  real<lower=1> s[S];#
}#
model {#
  b0 ~ normal(0, 100);#
  sigma_b0 ~ uniform(1, 100);#
  b ~ normal(b0, sigma_b0);#
  s0 ~ uniform(1, 100);#
  s ~ pareto(1, s0);#
  for (i in 1:N)#
  	y[i] ~ normal(b[idx[i]], s[idx[i]]);#
}#
'
fit1.s <- stan(model_code = fit1_mod, data = fit1_dat, iter = 10, chains = 1)
fit1_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  real b0;#
  vector[S] b;#
  real<lower=1> sigma_b0;#
  real<lower=1> s0;#
  real<lower=1> s[S];#
}#
model {#
  b0 ~ normal(0, 100);#
  sigma_b0 ~ uniform(1, 100);#
  b ~ normal(b0, sigma_b0);#
  s0 ~ uniform(1, 100);#
  s ~ pareto(1, s0);#
  for (i in 1:N)#
  	y[i] ~ normal(b[idx[i]], s[idx[i]]);#
}#
'
fit1.s <- stan(model_code = fit1_mod, data = fit1_dat, iter = 10, chains = 1)
rm(list = ls())
fit1_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector[S] b;#
  real<lower=1> s[S];#
}#
model {#
  b ~ normal(0, 100);#
  s ~ pareto(1, 1);#
  for (i in 1:N)#
  	y[i] ~ normal(b[idx[i]], s[idx[i]]);#
}#
'#
#
fit1_dat <- list(y = qes.age$value,#
    idx = unclass(qes.age$idx),#
    N = length(qes.age$value),#
    S = length(unique(qes.age$idx))#
	)#
fit1.s <- stan(model_code = fit1_mod, data = fit1_dat, iter = 10, chains = 1)
lapply(c("ggplot2", "plyr", "reshape2", "data.table", "rstan", "lme4", "arm", "parallel"), require, character.only = TRUE)#
#
qes1 <- as.data.table(read.csv("~/Dropbox/tomject/all_fits4.csv"))#
qes1 <- qes1[bad.data==0,]#
qes1 <- qes1[,list(idx,#
                  format,#
                  width,#
                  question,#
                  distribution,#
                  true.score,#
                  z, q1, q2, q3, p1, p2, p3,#
                  par.1,par.2,est.mean, est.var)]#
qes1[,row.id := 1:nrow(qes1)]#
qes1[, distribution:=as.character(distribution)]#
setkey(qes1,question)#
#
### means of means (age)#
#
qes.age <- melt(qes1["age"], measure.vars = c("q1", "q2", "q3"))#
qes.age$idx <- factor(unclass(factor(qes.age$idx)))#
#
fit1 <- lmer(value ~ 1 + (1|idx), data = qes.age)#
#
fit1_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector[S] b;#
  real<lower=1> s[S];#
}#
model {#
  b ~ normal(0, 100);#
  s ~ pareto(1, 1);#
  for (i in 1:N)#
  	y[i] ~ normal(b[idx[i]], s[idx[i]]);#
}#
'#
#
fit1_dat <- list(y = qes.age$value,#
    idx = unclass(qes.age$idx),#
    N = length(qes.age$value),#
    S = length(unique(qes.age$idx))#
	)
fit1.s <- stan(model_code = fit1_mod, data = fit1_dat, iter = 10, chains = 1)
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1)
qes.unem <- melt(qes1["q4"], measure.vars = c("q1", "q2", "q3"))#
qes.unem$idx <- factor(unclass(factor(qes.unem$idx)))#
#
fit2 <- lmer(value ~ 1 + (1|idx), data = qes.unem)#
#
fit2_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector[S] b;#
  real<lower=1> s[S];#
}#
model {#
  b ~ normal(0, 100);#
  s ~ pareto(1, 1);#
  for (i in 1:N)#
  	y[i] ~ normal(b[idx[i]], s[idx[i]]);#
}#
'#
#
fit2_dat <- list(y = qes.umen$value,#
    idx = unclass(qes.unem$idx),#
    N = length(qes.unem$value),#
    S = length(unique(qes.unem$idx))#
	)#
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1)
fit2_dat <- list(y = qes.unem$value,#
    idx = unclass(qes.unem$idx),#
    N = length(qes.unem$value),#
    S = length(unique(qes.unem$idx))#
	)
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1)
?Pareto
??Pareto
library(VGAM)
libraray(ggplot2)
library(ggplot2)
qplot(rpareto(1000, 1))
qplot(rpareto(1000, 1, 1))
install.package("geoR")
install.packages("geoR")
fit1_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  real b0;#
  real s0;#
  vector[S] b;#
  real<lower=1> s[S];#
}#
model {#
  b0 ~ runif(0, 100);#
  b ~ normal(b0, 10);#
  s0 ~ uniform(1, 100);#
  s ~ inv_chi_sqare(s0);#
  for (i in 1:N)#
  	y[i] ~ normal(b[idx[i]], s[idx[i]]);#
}#
'
fit1_dat <- list(y = qes.age$value,#
    idx = unclass(qes.age$idx),#
    N = length(qes.age$value),#
    S = length(unique(qes.age$idx))#
	)
fit1.s <- stan(model_code = fit1_mod, data = fit1_dat, iter = 10, chains = 1)
fit1_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  real b0;#
  real s0;#
  vector[S] b;#
  real<lower=1> s[S];#
}#
model {#
  b0 ~ uniform(0, 100);#
  b ~ normal(b0, 10);#
  s0 ~ uniform(1, 100);#
  s ~ inv_chi_sqare(s0);#
  for (i in 1:N)#
  	y[i] ~ normal(b[idx[i]], s[idx[i]]);#
}#
'
fit1.s <- stan(model_code = fit1_mod, data = fit1_dat, iter = 10, chains = 1)
fit1_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  real b0;#
  real s0;#
  vector[S] b;#
  real<lower=1> s[S];#
}#
model {#
  b0 ~ uniform(0, 100);#
  b ~ normal(b0, 10);#
  s0 ~ uniform(1, 100);#
  s ~ inv_chi_square(s0);#
  for (i in 1:N)#
  	y[i] ~ normal(b[idx[i]], s[idx[i]]);#
}#
'#
#
fit1_dat <- list(y = qes.age$value,#
    idx = unclass(qes.age$idx),#
    N = length(qes.age$value),#
    S = length(unique(qes.age$idx))#
	)
fit1.s <- stan(model_code = fit1_mod, data = fit1_dat, iter = 10, chains = 1)
fit1_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  real b0;#
  real<lower=1> s0;#
  vector[S] b;#
  real<lower=1> s[S];#
}#
model {#
  b0 ~ uniform(0, 100);#
  b ~ normal(b0, 10);#
  s0 ~ uniform(1, 100);#
  s ~ inv_chi_square(s0);#
  for (i in 1:N)#
  	y[i] ~ normal(b[idx[i]], s[idx[i]]);#
}#
'#
#
fit1_dat <- list(y = qes.age$value,#
    idx = unclass(qes.age$idx),#
    N = length(qes.age$value),#
    S = length(unique(qes.age$idx))#
	)#
fit1.s <- stan(model_code = fit1_mod, data = fit1_dat, iter = 10, chains = 1)
fit2_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  real<lower=0,upper=1> phi[S];#
  real<lower=0.1> lambda[S];#
}#
model {#
  vector alpha[S];#
  vector beta[S];#
  phi ~ beta(1,1);#
  lambda ~ pareto(0.1,1.5);#
  alpha <- lambda * phi;#
  beta <- lambda * (1 - phi);#
  for (i in 1:N)#
    y[i] ~ beta(alpha[idx[i]], beta[idx[i]]);#
}#
'#
#
fit2_dat <- list(y = qes.unem$value,#
    idx = unclass(qes.unem$idx),#
    N = length(qes.unem$value),#
    S = length(unique(qes.unem$idx))#
	)#
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1)
fit2_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  real<lower=0,upper=1> phi[S];#
  real<lower=0.1> lambda[S];#
}#
model {#
  vector[S] alpha;#
  vector[S] beta;#
  phi ~ beta(1,1);#
  lambda ~ pareto(0.1,1.5);#
  alpha <- lambda * phi;#
  beta <- lambda * (1 - phi);#
  for (i in 1:N)#
    y[i] ~ beta(alpha[idx[i]], beta[idx[i]]);#
}#
'#
#
fit2_dat <- list(y = qes.unem$value,#
    idx = unclass(qes.unem$idx),#
    N = length(qes.unem$value),#
    S = length(unique(qes.unem$idx))#
	)#
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1)
fit2_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector<lower=0,upper=1>[S] phi;#
  vector<lower=0.1>[S] lambda;#
}#
model {#
  vector[S] alpha;#
  vector[S] beta;#
  phi ~ beta(1,1);#
  lambda ~ pareto(0.1,1.5);#
  alpha <- lambda * phi;#
  beta <- lambda * (1 - phi);#
  for (i in 1:N)#
    y[i] ~ beta(alpha[idx[i]], beta[idx[i]]);#
}#
'
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1)
fit2_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector<lower=0,upper=1>[S] phi;#
  vector<lower=0.1>[S] lambda;#
}#
model {#
  vector[S] alpha;#
  vector[S] beta;#
  phi ~ beta(1,1);#
  lambda ~ pareto(0.1,1.5);#
  alpha <- lambda .* phi;#
  beta <- lambda .* (1 - phi);#
  for (i in 1:N)#
    y[i] ~ beta(alpha[idx[i]], beta[idx[i]]);#
}#
'#
#
fit2_dat <- list(y = qes.unem$value,#
    idx = unclass(qes.unem$idx),#
    N = length(qes.unem$value),#
    S = length(unique(qes.unem$idx))#
	)#
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1)
str(fit2_dat)
range(fit2_dat$y)
fit2_dat$y[fit2_dat$y < 0] <- 0
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1)
phi <- rbeta(10000, 1, 1)
lambda <- rpareto(10000, .1, 1.5)
qplot(phi * lambda)
summary(phi * lambda)
summary((1 - phi) * lambda)
alpha <- phi * lambda
beta <- (1 - phi) * lambda
a <- rbeta(10000, alpha, beta)
qplot(a)
summary(a)
qplot(a)
fit2_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector<lower=0,upper=1>[S] phi;#
  vector<lower=0.1>[S] lambda;#
}#
model {#
  vector[S] alpha;#
  vector[S] beta;#
  phi ~ beta(1,1);#
  lambda ~ pareto(0.1,1.5);#
  alpha <- lambda .* phi;#
  beta <- lambda .* (1 - phi);#
  for (i in 1:N)#
    y[i] ~ beta(alpha[idx[i]], beta[idx[i]]);#
}#
'#
#
fit2_dat <- list(y = qes.unem$value,#
    idx = unclass(qes.unem$idx),#
    N = length(qes.unem$value),#
    S = length(unique(qes.unem$idx))#
	)#
# hack#
fit2_dat$y[fit2_dat$y < 0] <- 0#
#
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1)
set_cppo('debug')
fit2_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector<lower=0,upper=1>[S] phi;#
  vector<lower=0.1>[S] lambda;#
}#
model {#
  vector[S] alpha;#
  vector[S] beta;#
  phi ~ beta(1,1);#
  lambda ~ pareto(0.1,1.5);#
  alpha <- lambda .* phi;#
  beta <- lambda .* (1 - phi);#
  for (i in 1:N)#
    y[i] ~ beta(alpha[idx[i]], beta[idx[i]]);#
}#
'#
#
fit2_dat <- list(y = qes.unem$value,#
    idx = unclass(qes.unem$idx),#
    N = length(qes.unem$value),#
    S = length(unique(qes.unem$idx))#
	)#
# hack#
fit2_dat$y[fit2_dat$y < 0] <- 0#
#
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1)
tapply(qes.unem$value, qes.unem$idx, mean)
summary(tapply(qes.unem$value, qes.unem$idx, mean))
fit2_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector<lower=0,upper=1>[S] phi;#
  vector<lower=0.1>[S] lambda;#
}#
model {#
  vector[S] alpha;#
  vector[S] beta;#
  phi ~ beta(1,1);#
  lambda ~ pareto(0.1,1.5);#
  alpha <- lambda .* phi;#
  beta <- lambda .* (1 - phi);#
  for (i in 1:N)#
    y[i] ~ beta(alpha[idx[i]], beta[idx[i]]);#
}#
'
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1)
?stan
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1, init = 0)
fit2_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector<lower=0,upper=1>[S] phi;#
  vector<lower=0.1>[S] lambda;#
}#
model {#
  vector<lower=0>[S] alpha;#
  vector<lower=0>[S] beta;#
  phi ~ beta(1,1);#
  lambda ~ pareto(0.1,1.5);#
  alpha <- lambda .* phi;#
  beta <- lambda .* (1 - phi);#
  for (i in 1:N)#
    y[i] ~ beta(alpha[idx[i]], beta[idx[i]]);#
}#
'
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1, init = 0)
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1)
is.na(qes.unem$y)
sum(is.na(qes.unem$value))
fit2_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector<lower=0,upper=1>[S] phi;#
  vector<lower=0.1>[S] lambda;#
}#
model {#
  vector[S] alpha;#
  vector[S] beta;#
  phi ~ beta(1,1);#
  lambda ~ pareto(0.1,1.5);#
  alpha <- lambda .* phi;#
  beta <- lambda .* (1 - phi);#
  for (i in 1:N)#
    y[i] ~ beta(alpha[idx[i]], beta[idx[i]]);#
}#
'#
#
fit2_dat <- list(y = qes.unem$value,#
    idx = unclass(qes.unem$idx),#
    N = length(qes.unem$value),#
    S = length(unique(qes.unem$idx))#
	)#
# hack#
fit2_dat$y[fit2_dat$y < 0] <- 0#
#
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1)
range(fit2_dat$y)
fit2_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector<lower=0,upper=1>[S] phi;#
  vector<lower=0.1>[S] lambda;#
}#
model {#
  vector[S] alpha;#
  vector[S] beta;#
  phi ~ beta(1,1);#
  lambda ~ pareto(0.1,1.5);#
  alpha <- lambda .* phi;#
  beta <- lambda .* (1.0 - phi);#
  for (i in 1:N)#
    y[i] ~ beta(alpha[idx[i]], beta[idx[i]]);#
}#
'#
#
fit2_dat <- list(y = qes.unem$value,#
    idx = unclass(qes.unem$idx),#
    N = length(qes.unem$value),#
    S = length(unique(qes.unem$idx))#
	)#
# hack#
fit2_dat$y[fit2_dat$y < 0] <- 0#
#
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1)
?stan
str(fit2_dat)
qes1 <- as.data.table(read.csv("~/Dropbox/tomject/all_fits4.csv"))#
qes1 <- qes1[bad.data==0,]#
qes1 <- qes1[,list(idx,#
                  format,#
                  width,#
                  question,#
                  distribution,#
                  true.score,#
                  z, q1, q2, q3, p1, p2, p3,#
                  par.1,par.2,est.mean, est.var)]#
qes1[,row.id := 1:nrow(qes1)]#
qes1[, distribution:=as.character(distribution)]#
setkey(qes1,question)
qes.age <- melt(qes1["age"], measure.vars = c("q1", "q2", "q3"))#
qes.age$idx <- factor(unclass(factor(qes.age$idx)))
qes.unem <- melt(qes1["q4"], measure.vars = c("q1", "q2", "q3"))
qes.unem$idx <- factor(unclass(factor(qes.unem$idx)))
fit2 <- lmer(value ~ 1 + (1|idx), data = qes.unem)
summary(fit2)
sd(fit2_dat$y)
fit2_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector<lower=0,upper=1>[S] phi;#
  vector<lower=0.1>[S] lambda;#
}#
model {#
  vector[S] alpha;#
  vector[S] beta;#
  phi ~ beta(1,1);#
  lambda ~ pareto(0.1,1.5);#
  alpha <- lambda .* phi;#
  beta <- lambda .* (1.0 - phi);#
  for (i in 1:N)#
    y[i] ~ beta(alpha[idx[i]], beta[idx[i]]);#
}#
'
fit2_dat <- list(y = qes.unem$value,#
    idx = unclass(qes.unem$idx),#
    N = length(qes.unem$value),#
    S = length(unique(qes.unem$idx))#
	)#
# hack#
fit2_dat$y[fit2_dat$y < 0] <- 0
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1)
str(fit2_dat)
fit2_dat$idx
str(fit2_dat)
378*3
rbeta(1,0,1)
rbeta(1,1,0)
rbeta(1,1,0.5)
fit2_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector<lower=0.001,upper=0.999>[S] phi;#
  vector<lower=0.1>[S] lambda;#
}#
model {#
  vector[S] alpha;#
  vector[S] beta;#
  phi ~ uniform(.001, .999);#
  lambda ~ pareto(0.1,1.5);#
  alpha <- lambda .* phi;#
  beta <- lambda .* (1.0 - phi);#
  for (i in 1:N)#
    y[i] ~ beta(alpha[idx[i]], beta[idx[i]]);#
}#
'#
#
fit2_dat <- list(y = qes.unem$value,#
    idx = unclass(qes.unem$idx),#
    N = length(qes.unem$value),#
    S = length(unique(qes.unem$idx))#
	)#
# hack#
fit2_dat$y[fit2_dat$y < 0] <- 0#
#
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1)
fit2_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector<lower=0,upper=1>[S] phi;#
  vector<lower=0.1>[S] lambda;#
}#
model {#
  vector[S] alpha;#
  vector[S] beta;#
  phi ~ beta(1,1);#
  phi <- if_else(step(1.0 - phi), phi, 0.99999);#
  lambda ~ pareto(0.1,1.5);#
  alpha <- lambda .* phi;#
  beta <- lambda .* (1.0 - phi);#
  for (i in 1:N)#
    y[i] ~ beta(alpha[idx[i]], beta[idx[i]]);#
}#
'
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1)
fit2_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector<lower=0,upper=1>[S] phi;#
  vector<lower=0.1>[S] lambda;#
}#
model {#
  vector[S] alpha;#
  vector[S] beta;#
  phi ~ beta(1,1);#
  for (i in 1:N)#
    phi <- if_else(step(1.0 - phi), phi, 0.99999);#
  lambda ~ pareto(0.1,1.5);#
  alpha <- lambda .* phi;#
  beta <- lambda .* (1.0 - phi);#
  for (i in 1:N)#
    y[i] ~ beta(alpha[idx[i]], beta[idx[i]]);#
}#
'
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1)
fit2_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector<lower=0,upper=1>[S] phi;#
  vector<lower=0.1>[S] lambda;#
}#
model {#
  vector[S] alpha;#
  vector[S] beta;#
  phi ~ beta(1,1);#
  for (i in 1:N)#
    phi[i] <- if_else(step(1.0 - phi[i]), phi[i], 0.99999);#
  lambda ~ pareto(0.1,1.5);#
  alpha <- lambda .* phi;#
  beta <- lambda .* (1.0 - phi);#
  for (i in 1:N)#
    y[i] ~ beta(alpha[idx[i]], beta[idx[i]]);#
}#
'
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1)
fit2_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector<lower=0,upper=1>[S] phi;#
  vector<lower=0.1>[S] lambda;#
}#
model {#
  vector[S] alpha;#
  vector[S] beta;#
  phi ~ beta(1,1);#
  for (i in 1:S)#
    phi[i] <- if_else(step(phi[i]), phi[i], 0.00001);#
  lambda ~ pareto(0.1,1.5);#
  alpha <- lambda .* phi;#
  beta <- lambda .* (1.0 - phi);#
  for (i in 1:N)#
    y[i] ~ beta(alpha[idx[i]], beta[idx[i]]);#
}#
'
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1)
qplot(rpareto(100000, .1, 1.5))
fit2_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector<lower=0,upper=1>[S] phi;#
  vector<lower=1>[S] lambda;#
}#
model {#
  vector[S] alpha;#
  vector[S] beta;#
  phi ~ beta(1,1);#
  lambda ~ pareto(1,1.5);#
  alpha <- lambda .* phi;#
  beta <- lambda .* (1.0 - phi);#
  for (i in 1:N)#
    y[i] ~ beta(alpha[idx[i]], beta[idx[i]]);#
}#
'
fit2.s <- stan(model_code = fit2_mod, data = fit2_dat, iter = 10, chains = 1)
temp_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector<lower=1,upper=100>[S] alpha;#
  vector<lower=1,upper=100>[S] beta;#
}#
model {#
#
  for (i in 1:N)#
    y[i] ~ beta(alpha[idx[i]], beta[idx[i]]);#
}#
'
fit2_dat$y[fit2_dat$y < 0] <- 0
temp.s <- stan(model_code = temp_mod, data = fit2_dat, iter = 10, chains = 1)
temp_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  vector<lower=1,upper=100> alpha;#
  vector<lower=1,upper=100> beta;#
}#
model {#
#
  for (i in 1:N)#
    y[i] ~ beta(alpha, beta);#
}#
'
temp.s <- stan(model_code = temp_mod, data = fit2_dat, iter = 10, chains = 1)
temp_mod <- '#
data{#
  int<lower=1> N;#
  int<lower=1> S;#
  vector[N] y;#
  int<lower=1> idx[N];#
}#
parameters {#
  real<lower=1,upper=100> alpha;#
  real<lower=1,upper=100> beta;#
}#
model {#
#
  for (i in 1:N)#
    y[i] ~ beta(alpha, beta);#
}#
'
temp.s <- stan(model_code = temp_mod, data = fit2_dat, iter = 10, chains = 1)
temp_mod <- '#
parameters {#
  real<lower=1,upper=100> alpha;#
  real<lower=1,upper=100> beta;#
  real mu;#
}#
model {#
  mu ~ beta(alpha, beta);#
}#
'
temp.s <- stan(model_code = temp_mod)
lapply(c("ggplot2", "plyr", "reshape2", "data.table", "rstan", "lme4", "arm", "parallel"), require, character.only = TRUE)
temp_mod <- '#
parameters {#
  real mu;#
}#
model {#
  mu ~ beta(1, 1);#
}#
'
temp.s <- stan(model_code = temp_mod)
temp_mod <- '#
parameters {#
  real mu;#
}#
model {#
  mu ~ beta(10.0, 5.0);#
}#
'
temp.s <- stan(model_code = temp_mod)
remove.packages("gemmR")
library(rcpp)
library(Rcpp)
?Rcpp
remove.packages("gemmR")
library(devtoosl)
library(devtools)
install_github("gemmR", "jchrszcz", subdir = "gemmR")
library(gemmR)
gemm
?gemm
data(mtcars)
summary(mtcars)
temp <- gemm(mpg ~ cyl + hp + wt, data = mtcars)
temp
summary(temp)
str(temp)
remove.packages("gemmR")
install.packages("~/Dropbox/learnr/gemmR/gemmR_1.2.01.tar.gz", repo = NULL, type = "source")
library(gemmR)
gemm
gemm.formula
data(mtcars)
a <- gemm(mpg ~ cyl + wt, data = mtcars, n.chains = 2, n.gens = 3)
a
str(a)
predict(a)
str(predict(a))
predict.gemm
str(a)
remove.packages("gemmR")
library(gemmR)
install_github("gemmR", "jchrszcz", subdir = "gemmR", ref = "norming")
lapply(c("Rcpp","roxygen2","devtools"), require, character.only = TRUE)
install_github("gemmR", "jchrszcz", subdir = "gemmR", ref = "norming")
library(gemmR)
predict.gemm
remove.packages("gemmR")
install_github("gemmR", "jchrszcz", subdir = "gemmR", ref = "norming")
lapply(c("Rcpp","roxygen2","devtools"), require, character.only = TRUE)
install_github("gemmR", "jchrszcz", subdir = "gemmR", ref = "norming")
library(gemmR)
predict.gemm
data(mtcars)
a <- gemm(mpg ~ cyl + hwy, data = mtcars)
a <- gemm(mpg ~ cyl + wt, data = mtcars)
temp <- mpg ~ cyl + wt
str(temp)
temp[1]
temp[2]
terms(temp)
attr(terms(temp), "factors")
attr(terms(temp), "variables")
attr(terms(temp), "variables")[1]
attr(terms(temp), "variables")[2]
attr(terms(temp), "variables")[3]
attr(terms(temp), "variables")[4]
a <- 1:5
names(a) <- "blue"
a
?vector
a <- matrix(1:5, ncol =1, col.names = "blue")
?matrix
a <- matrix(1:5, ncol =1, d.names = "blue")
a <- matrix(1:5, ncol =1, dim.names = "blue")
a <- matrix(1:5, ncol =1, dim.names = c("blue", NULL))
?matrix
a <- matrix(1:5, ncol =1, dimnames = c("blue", NULL))
a <- matrix(1:5, ncol =1, dimnames = list("blue", NULL))
a <- matrix(1:5, ncol =1, dimnames = list("blue"))
?matrix
a <- matrix(1:5, ncol =1, dimnames = list(NULL, "blue"))
a
ls9
ls()
temp
a <- lm(temp, mtcars)
summary(a)
mf <- model.frame(temp, mtcars)
mf
x <- model.matrix(attr(mf, "terms"), data=mf)[,-1]
y <- model.response(mf)
x
y
y <- matrix(model.response(mf), ncol = 1, dimnames = list(NULL, names(mf)[1]))
y
cbind(y.x)
cbind(y,x)
me <- attributes(attributes(mf)$terms)$term.labels[attributes(attributes(mf)$terms)$order==1]
me
mm
mf
mm <- model.matrix(attr(mf, "terms"), data=mf)
mm
fmla <- as.formula(paste("y ~ ", paste(me, collapse= "*")))
fmla
names(mf)[1]
fmla <- as.formula(paste(names(mf)[1], " ~ ", paste(me, collapse= "*")))
fmla
lapply(c("Rcpp","roxygen2","devtools"), require, character.only = TRUE)
setwd("~/Dropbox/learnr/gemmR")
system("rm -rf ~/Dropbox/learnr/gemmR/gemmR")
Rcpp.package.skeleton(name = "gemmR", force = TRUE, code_files = c("R/gemmquick.R"), cpp_files = c("src/kt_gemmR.cpp","src/new_ga.cpp"), example_code = FALSE, attributes = FALSE)
system("cp -r ~/Dropbox/learnr/gemmR/inst ~/Dropbox/learnr/gemmR/gemmR")
system("cp -r ~/Dropbox/learnr/gemmR/man ~/Dropbox/learnr/gemmR/gemmR")
system("cp ~/Dropbox/learnr/gemmR/DESCRIPTION ~/Dropbox/learnr/gemmR/gemmR")
system("rm -f ~/Dropbox/learnr/gemmR/gemmR/Read-and-delete-me")
build("~/Dropbox/learnr/gemmR/gemmR")
install("~/Dropbox/learnr/gemmR/gemmR")
library(gemmR)#
n <- 20#
x1 <- rnorm(100)#
x2 <- rnorm(100)#
x3 <- rep(-2:2, each = 20)#
x4 <- rep(0:1, times = 50)#
x5 <- x1#
y <- as.vector(scale(x1 + x3 + rnorm(100)))#
df <- data.frame(y, x1, x2, x3 = factor(x3), x4 = factor(x4), x5)#
#df <- df[sample(1:nrow(df), n, replace = FALSE),]#
#
system.time(a <- gemm(y ~ x1 * x3, data = df, n.chains = 4, n.gens = 2, parallel = TRUE))
gemmEst
a
system.time(a <- gemm(y ~ x1 * x3 + x5, data = df, n.chains = 4, n.gens = 2, parallel = TRUE))
a
